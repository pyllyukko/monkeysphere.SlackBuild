#!/bin/bash
#
#  monkeysphere.SlackBuild is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of the License,
#  or any later version.
#
#  monkeysphere.SlackBuild is distributed in the hope that it will
#  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
#  Public License for more details.
#
#  You should have received a copy of the GNU General Public License along
#  with this program; if not, write to the Free Software Foundation, Inc.,
#  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
#
# slackbuild for monkeysphere, by Silvio Rhatto
# requires: perl-digest-sha perl-crypt-openssl-rsa 
# tested: monkeysphere-0.36
# model: generic.mkSlackBuild $Rev: 824 $
#

# Look for slackbuildrc
if [ -f ~/.slackbuildrc ]; then
  source ~/.slackbuildrc
elif [ -f /etc/slackbuildrc ]; then
  source /etc/slackbuildrc
fi

# Set variables
CWD="$(pwd)"
SRC_NAME="monkeysphere"
PKG_NAME="monkeysphere"
ARCH=${ARCH:=i486}
SRC_VERSION=${VERSION:=0.42}
PKG_VERSION="$(echo "$SRC_VERSION" | tr '[[:blank:]-]' '_')"
BUILD=${BUILD:=1}
SRC_DIR=${SRC_DIR:=$CWD}/$PKG_NAME
TMP=${TMP:=/tmp}
PKG=${PKG:=$TMP/package-$PKG_NAME}
REPOS=${REPOS:=$TMP}
SLACKBUILD_PATH=${SLACKBUILD_PATH:="net/misc/monkeysphere"}
PREFIX=${PREFIX:=/usr}
PKG_WORK="$TMP/$SRC_NAME"
CONF_OPTIONS=${CONF_OPTIONS:=""}
NUMJOBS=${NUMJOBS:=""}

# Set system libraries' path and optmization flags based on $ARCH
LIBDIR="$PREFIX/lib"

if [ "$ARCH" = "i386" ]; then
  SLKCFLAGS="-O2 -march=i386 -mtune=i686"
elif [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686"
elif [ "$ARCH" = "s390" ]; then
  SLKCFLAGS="-O2"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIR="$PREFIX/lib64"
  LDFLAGS="-L/lib64 -L/usr/lib64"
fi

# Set error codes (used by createpkg)
ERROR_WGET=31;      ERROR_MAKE=32;      ERROR_INSTALL=33
ERROR_MD5=34;       ERROR_CONF=35;      ERROR_HELP=36
ERROR_TAR=37;       ERROR_MKPKG=38;     ERROR_GPG=39
ERROR_PATCH=40;     ERROR_VCS=41;       ERROR_MKDIR=42
ERROR_MANIFEST=43;

if ! getent group monkeysphere 1>/dev/null
then
  echo -e "Error: you must have the \"monkeysphere\" group. Create it with:\n       groupadd -r monkeysphere" 1>&2
  exit 1
elif ! getent passwd monkeysphere 1>/dev/null
then
  echo -e "Error: you must have the \"monkeysphere\" user. Create it with:\n       useradd -g monkeysphere -r -d /var/lib/monkeysphere -M -s /sbin/nologin -e 1970-01-02 monkeysphere" 1>&2
  exit 1
fi

# Clean up any leftovers of previous builds
rm -rf "$PKG_WORK" 2> /dev/null
rm -rf "$PKG" 2> /dev/null

# Create directories if necessary
mkdir -p "$SRC_DIR" || exit $ERROR_MKDIR
mkdir -p "$PKG" || exit $ERROR_MKDIR
mkdir -p "$REPOS" || exit $ERROR_MKDIR
mkdir -p "$PKG_WORK" || exit $ERROR_MKDIR

# Dowload source if necessary
SRC="$SRC_NAME"_"$VERSION.orig.tar.gz"
URL="http://archive.monkeysphere.info/debian/pool/monkeysphere/m/monkeysphere/$SRC"

if [ ! -s "$SRC_DIR/$SRC" ] || ! gunzip -t "$SRC_DIR/$SRC" 2> /dev/null; then
  wget "$URL" -O "$SRC_DIR/$SRC" || exit $ERROR_WGET
fi

# Check Manifest file
if [ -e "$CWD/Manifest" ]; then

  # Manifest signature checking
  if grep -q -- "-----BEGIN PGP SIGNED MESSAGE-----" $CWD/Manifest; then
    echo "Checking Manifest signature..."
    gpgv $CWD/Manifest
    if [ "$?" != "0" ]; then
      exit $ERROR_MANIFEST
    fi
  fi

  echo "Checking Manifest for package's integrity..."
  grep -q "^[0-9a-f]\{64\}  .*monkeysphere_[0-9.]\+\.orig\.tar\.gz$" ${CWD}/Manifest
  if [ ${?} -ne 0 ]
  then
    echo "Error: SHA-2 checksum not found on the Manifest file" 1>&2
    exit 1
  fi
  pushd monkeysphere
  sed -n '/^[0-9a-f]\{64\}/s/\.\./\./p' ../Manifest | sha256sum -c
  if [ ${PIPESTATUS[1]} -ne 0 ]
  then
    echo "Error: SHA-2 check failed" 1>&2
    exit ${ERROR_MD5}
  fi
  popd

else
  exit $ERROR_MANIFEST
fi

# Untar
cd "$PKG_WORK"
tar --no-same-owner --no-same-permissions -xvf "$SRC_DIR/$SRC" || exit $ERROR_TAR
PKG_SRC="$PWD/`ls -l | awk '/^d/ { print $NF }'`"
cd "$PKG_SRC"

# Patch source
patches="$PKG_NAME.diff $PKG_NAME-$PKG_VERSION.diff
         $PKG_NAME-$PKG_VERSION-$ARCH.diff $PKG_NAME-$ARCH.diff"
for patch in $patches; do
  patch="`basename $patch`"
  if [ -f "$CWD/$patch" ]; then
    patch -Np1 < "$CWD/$patch" || exit $ERROR_PATCH
  elif [ -f "$CWD/patches/$patch" ]; then
    patch -Np1 < "$CWD/patches/$patch" || exit $ERROR_PATCH
  elif [ -f "$CWD/$patch.gz" ]; then
    gzip -dc "$CWD/$patch.gz" | patch -Np1 || exit $ERROR_PATCH
  elif [ -f "$CWD/patches/$patch.gz" ]; then
    gzip -dc "$CWD/patches/$patch.gz" | patch -Np1 || exit $ERROR_PATCH
  elif [ -f "$SRC_DIR/$patch" ]; then
    if [ "`basename $patch .gz`" != "$patch" ]; then
      gzip -dc $SRC_DIR/$patch | patch -Np1 || exit $ERROR_PATCH
    elif [ "`basename $patch .bz2`" != "$patch" ]; then
      bzip2 -dc $SRC_DIR/$patch | patch -Np1 || exit $ERROR_PATCH
    else
      patch -Np1 < "$SRC_DIR/$patch" || exit $ERROR_PATCH
    fi
  fi
done

# Compile
make $NUMJOBS || exit $ERROR_MAKE

# quick hack to get the docs into the right dir
sed -i "s:/share/doc/monkeysphere:/doc/monkeysphere-${PKG_VERSION}:" Makefile

# Install
make install DESTDIR="$PKG" || exit $ERROR_INSTALL

# Strip binaries
( cd "$PKG"
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | \
    xargs strip --strip-unneeded 2> /dev/null
)

# Install documentation
DOCS="COPYING README"
mkdir -p "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION" || exit $ERROR_MKDIR
for doc in $DOCS; do
  if [ -f "$doc" ]; then
    cp -a $doc "$PKG/usr/doc/$PKG_NAME-$PKG_VERSION"
  fi
done

# Add package description (slack-desc)
mkdir -p "$PKG/install" || exit $ERROR_MKDIR
cat << EODESC > "$PKG/install/slack-desc"
# HOW TO EDIT THIS FILE:
# The "handy ruler" below makes it easier to edit a package description. Line
# up the first '|' above the ':' following the base package name, and the '|'
# on the right side marks the last column you can put a character in. You must
# make exactly 11 lines for the formatting to be correct.  It's also
# customary to leave one space after the ':'.

            |-----handy-ruler-------------------------------------------------|
monkeysphere: monkeysphere
monkeysphere:
monkeysphere: The Monkeysphere project's goal is to extend OpenPGP's web of
monkeysphere: trust to new areas of the Internet to help us securely identify
monkeysphere: each other while we work online.
monkeysphere:
monkeysphere: Specifically, monkeysphere currently offers a framework to
monkeysphere: leverage the OpenPGP web of trust for OpenSSH authentication.
monkeysphere:
monkeysphere:
monkeysphere:
EODESC

# Move config files to .new to avoid overwriting any system config
for config_file in etc/monkeysphere/monkeysphere-host.conf etc/monkeysphere/monkeysphere.conf etc/monkeysphere/monkeysphere-authentication.conf; do
  mv $PKG/$config_file $PKG/$config_file.new
done

# Add a post-installation script (doinst.sh)
mkdir -p "$PKG/install" || exit $ERROR_MKDIR
cat << EOSCRIPT > "$PKG/install/doinst.sh"
config() {
  NEW="\$1"
  OLD="\$(dirname \$NEW)/\$(basename \$NEW .new)"
  OLD="\$(dirname \$NEW)/\$(basename \$OLD .sample)"
  OLD="\$(dirname \$NEW)/\$(basename \$OLD .dist)"

  # If there's no config file by that name, mv it over:
  if [ ! -r \$OLD ]; then
    mv \$NEW \$OLD
  elif [ "\$(cat \$OLD | md5sum)" = "\$(cat \$NEW | md5sum)" ]; then
    # toss the redundant copy
    rm \$NEW
  fi
  # Otherwise, we leave the .new copy for the admin to consider...
}

mkgroup() {
  GROUP="\$1"
  if ! grep -qe "^\$GROUP:" etc/group; then
    echo Creating group \$GROUP...
    chroot . /usr/sbin/groupadd \$GROUP
  fi
}

mkuser() {
  USER="\$1"
  if [ ! -z "\$2" ]; then
    GROUP="\$2"
  else
    GROUP="\$USER"
  fi
  if ! grep -qe "^\$USER:" etc/passwd; then
    echo Creating user \$USER...
    chroot . /usr/sbin/useradd \$USER -g \$GROUP
  fi
}

config etc/monkeysphere/monkeysphere-host.conf.new; config etc/monkeysphere/monkeysphere.conf.new; config etc/monkeysphere/monkeysphere-authentication.conf.new
EOSCRIPT

# Build the package
cd "$PKG"
mkdir -p $REPOS/$SLACKBUILD_PATH
makepkg -l y -c n "$REPOS/$SLACKBUILD_PATH/$PKG_NAME-$PKG_VERSION-$ARCH-$BUILD.tgz" || exit $ERROR_MKPKG

# Delete source and build directories if requested
if [ "$CLEANUP" == "yes" ] || [ "$1" = "--cleanup" ]; then
  rm -rf "$PKG_WORK" "$PKG"
fi
